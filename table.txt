1. Design the Single Table (Enquiry)
Let's list all the fields you'll likely need, based on your frontend pages and typical student enquiry flows:
A. Basic Info (Page 1)
id (auto)
name
email
phone
current_location
module (subject/module of enquiry)
timing (preferred training mode)
trainingTime (preferred training timings)
startTime (how soon to start)
profession (student's professional situation)
qualification (highest qualification)
experience (years of experience)
referral (how did they hear about you)
consent (boolean)
B. Enquiry Details (Page 2, for counselors)
calling1 (call status 1)
calling2
calling3
calling4
calling5
previous_interaction (notes or status)
status (e.g., 'new', 'in_progress', 'moved', etc.)
C. Demo/Batch/Accounts (Page 3, for accounts)
batch_code
batch_subject
demo_class_status
payment_status
move_to_demo (boolean or status)
admin_notes
D. HR/Placement/Interview (Pages for HR)
placement_status
placement_notes
interview_status
interview_notes
E. System Fields
created_at
updated_at
user (ForeignKey to User, if you want to track who created/edited)

----------------------------------------------------
Complete the Counsellor's Part
For the counsellor role, you want to enable:
View and access:
/enquiry-form (POST to /api/enquiries/)
/enquiry-list (GET from /api/enquiries/)
/demo-list (GET from /api/demo_lists/)
What we need to ensure:
Enquiry Form: Submits new enquiries to /api/enquiries/ (already set up).
Enquiry List: Fetches and displays data from /api/enquiries/ (mapping is now correct).
Demo List: Fetches data from /api/demo_lists/.
Sidebar: Only shows these three links for counsellors (already implemented).
Role-based API access: If you want to restrict API access on the backend,
 make sure your Django views check the user's role.




 DemoList:
 import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './DemoList.css';
import { IoSearch } from "react-icons/io5";

const DemoList = ({ isSidebarOpen }) => {
  const [demoData, setDemoData] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchDemoList();
  }, []);

  const fetchDemoList = async () => {
    const token = localStorage.getItem('access');
    try {
      const response = await axios.get('http://localhost:8000/api/enquiries/', {
        headers: { Authorization: `Bearer ${token}` },
      });

      const mapped = response.data
        .filter(item => item.move_to_demo === true || item.move_to_demo === 1)
        .map((item) => ({
          id: item.id,
          fullName: item.fullName || item.full_name || item.name || '',
          phone: item.phone || item.phone_number || '',
          email: item.email || '',
          code: item.batch_code || '',
          package: item.module || item.package || '',
          status: item.demo_class_status || '',
          move_to_demo: item.move_to_demo || false,
          move_to_acc: item.move_to_acc || false,
        }));

      setDemoData(mapped);
    } catch (error) {
      setDemoData([]);
      console.error('Failed to fetch:', error);
    }
  };

  const handleStatusChange = async (id, newStatus) => {
    const token = localStorage.getItem('access');
    const user = demoData.find((u) => u.id === id);
    if (!user) return;

    const payload = {
      demo_class_status: newStatus,
    };

    try {
      await axios.patch(`http://localhost:8000/api/enquiries/${id}/`, payload, {
        headers: { Authorization: `Bearer ${token}` },
      });

      setDemoData((prev) =>
        prev.map((u) => (u.id === id ? { ...u, status: newStatus } : u))
      );
    } catch (error) {
      console.error('Failed to update status:', error.response?.data || error.message);
    }
  };

  const handleMoveToAccounts = async (id) => {
    const token = localStorage.getItem('access');
    const user = demoData.find((u) => u.id === id);
    if (!user) return;

    const payload = {
      name: user.fullName,
      fullName: user.fullName,
      phone: user.phone,
      email: user.email,
      batch_code: user.code,
      module: user.package,
      demo_class_status: user.status,
      move_to_demo: true,
      move_to_acc: true,
    };

    try {
      await axios.put(`http://localhost:8000/api/enquiries/${id}/`, payload, {
        headers: { Authorization: `Bearer ${token}` },
      });

      setDemoData((prev) => prev.filter((u) => u.id !== id));
    } catch (error) {
      console.error('Failed to move to accounts:', error.response?.data || error.message);
    }
  };

  const handleMoveBackToEnquiryList = async (id) => {
    const token = localStorage.getItem('access');
    // Only update the necessary fields, leave others untouched
    const payload = {
      move_to_demo: false,
      move_to_acc: false,
      demo_class_status: 'Not Interested', // or keep as user.status if you want
    };

    try {
      await axios.patch(`http://localhost:8000/api/enquiries/${id}/`, payload, {
        headers: { Authorization: `Bearer ${token}` },
      });

      setDemoData((prev) => prev.filter((u) => u.id !== id));
    } catch (error) {
      console.error('Failed to move back to enquiry:', error.response?.data || error.message);
    }
  };

  const filteredData = demoData.filter((user) =>
    (user.fullName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
    (user.email || '').toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className={`demo-list-container ${!isSidebarOpen ? 'sidebar-closed' : ''}`}>
      <div className="header">
        <h2>Demo List</h2>
        <div className="search-box">
          <input
            type="text"
            placeholder="Search"
            className="search-input"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <button className="search-button">
            <IoSearch />
          </button>
        </div>
      </div>

      <table className="demo-table">
        <thead>
          <tr>
            <th>Full Name</th>
            <th>Phone Number</th>
            <th>Email Address</th>
            <th>Package Code</th>
            <th>Package</th>
            <th>Demo Class Status</th>
            <th>Move?</th>
          </tr>
        </thead>
        <tbody>
          {filteredData.map((user, index) => (
            <tr key={index}>
              <td>{user.fullName}</td>
              <td>{user.phone}</td>
              <td>{user.email}</td>
              <td>{user.code}</td>
              <td>{user.package}</td>
              <td>
                <select
                  className="demo-status-select"
                  value={user.status}
                  onChange={(e) => handleStatusChange(user.id, e.target.value)}
                  style={{
                    width: '150px',
                    height: '35px',
                    padding: '5px',
                    borderRadius: '4px',
                    border: '1px solid #ccc',
                    backgroundColor: '#fff',
                    fontSize: '14px',
                  }}
                >
                  <option value="Not yet started">Not yet started</option>
                  <option value="In progress">In progress</option>
                  <option value="Completed">Completed</option>
                  <option value="Not Interested">Not Interested</option>
                </select>
              </td>
              <td>
                {user.status === 'Completed' && (
                  <button className="move-btn" onClick={() => handleMoveToAccounts(user.id)}>
                    Move to Accounts DL
                  </button>
                )}
                {user.status === 'Not Interested' && (
                  <button className="move-btn" onClick={() => handleMoveBackToEnquiryList(user.id)}>
                    Back to Enquiry List
                  </button>
                )}
                {(user.status !== 'Completed' && user.status !== 'Not Interested') && (
                  <button className="move-btn disabled-btn" disabled>
                    Move
                  </button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default DemoList;
